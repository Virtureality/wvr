#!/usr/bin/env node
var Context = require('../index').Context;
var fs = require('fs');

var args = require('minimist')(process.argv.slice(2), {
  string: 'to',
  boolean: ['patch', 'minor', 'major', 'premajor', 'preminor', 'prepatch', 'prerelease', 'yes', 'quiet', 'dry-run', 'pre'],
  alias: { h: 'help', V: 'version', v: 'to', p: 'patch', m: 'minor', M: 'major', y: 'yes', q: 'quiet', n: 'dry-run' }
});

if (args.version) {
  console.log(require('../package.json').version);
  process.exit();
}

if (args.help || !args._[0]) {
  var cmd = require('path').basename(process.argv[1]);
  console.log(require('fs').readFileSync(__dirname+'/../Help.txt','utf-8').replace(/\$0/g, cmd).trim());
  process.exit();
}

try {
  var contexts = [];
  var options = toOptions(args);

  args._.forEach(function (fname) {
    var contents = require('fs').readFileSync(fname, 'utf-8');
    var ctx = new Context(contents, fname, options);
    if (!ctx.valid) { throw new Error("ENOVERSION, no version found on '" + fname + "'"); }
    contexts.push(ctx);
  });

  contexts.forEach(function (ctx) {
    print();
    print(ctx.preview());
  });

  // don't proceed with --dry-run
  if (args['dry-run']) return;

  askToProceed(function (res) {
    if (res) {
      contexts.forEach(function (ctx) {
        fs.writeFileSync(ctx.filename, ctx.toString(), 'utf-8');
      });
      if (!args.yes) print('\033[1A\033[2K\033[32m✓\033[0m', 'done!');
    } else {
      if (!args.yes) print('\033[1A\033[2K\033[31m✗\033[0m', 'cancelled');
      process.exit(16);
    }
  });

} catch (e) {
  console.warn('\033[31m✗\033[0m', e.message);
  process.exit(8);
}

function print () {
  if (args.quiet) return;
  console.warn.apply(console, arguments);
}

function askToProceed (fn) {
  if (args.yes || args.quiet) return fn(true);
  print();
  ask('proceed? [Yn] ', function (res) {
    if (res.toLowerCase() === 'y' || !res)
      fn(true);
    else
      fn(false);
  });
}

/**
 * toOptions():
 * (private)
 */

function toOptions (args) {
  var options = {};

  if (args.to) options.version = args.to;
  else if (args.major) options.inc = 'major';
  else if (args.minor) options.inc = 'minor';
  else if (args.premajor) options.inc = 'premajor';
  else if (args.preminor) options.inc = 'preminor';
  else if (args.prepatch) options.inc = 'prepatch';
  else if (args.prerelease || args.pre) options.inc = 'prerelease';
  else options.inc = 'patch';

  return options;
}

/**
 * ask():
 * (private) thanks https://coderwall.com/p/v16yja
 */

function ask (question, fn) {
  var r = require('readline').createInterface({
    input: process.stdin,
    output: process.stderr});

  r.question(question, function (answer) {
    r.close();
    fn(answer);
  });
}
