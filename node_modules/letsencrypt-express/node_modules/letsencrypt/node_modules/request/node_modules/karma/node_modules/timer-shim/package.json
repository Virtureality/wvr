{
  "name": "timer-shim",
  "version": "0.3.0",
  "description": "Test-friendly timer function replacements.",
  "main": "index.js",
  "scripts": {
    "test": "make test",
    "prepublish": "make all"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chakrit/timer-shim"
  },
  "keywords": [
    "timer",
    "setTimeout",
    "setInterval",
    "nextTick"
  ],
  "author": {
    "name": "Chakrit Wichian",
    "email": "service@chakrit.net",
    "url": "http://chakrit.net"
  },
  "license": "BSD",
  "devDependencies": {
    "mocha-istanbul": "~0.2.0",
    "mocha-subject": "~0.2.0",
    "coffee-script": "~1.6.3",
    "chai": "~1.7.2",
    "mocha": "~1.12.0",
    "sinon": "~1.7.3",
    "istanbul": "~0.1.43"
  },
  "dependencies": {
    "linkedlist": "~1.0.1"
  },
  "readme": "\n# TIMER-SHIM\n\n> All problems in computer science can be solved by another level of indirection\n\nTIMER-SHIM is a simple wrapper around standard timer functions adding the ability to mock\n/ stub / test timing functions with ease.\n\nIf you have trouble getting mocha and sinon fake timers to behave, or you have trouble\ntesting code that depends on `setTimeout` and/or `setInterval` you will find this simple\ncomes in quite handy.\n\nAdditionally, TIMER-SHIM also provides a few niceties over standard timer functions,\nincluding:\n\n* Call with timeout number before the function (or vice versa - doesn't matter.)\n* Shorter and simpler aliases without any magic or prototype infection.\n* Protect against NaN and non-function values to save you debugging time.\n\nAnd best of all:\n\n* Provides `pause()`, `resume()` and `wind()` so you can test your timing functionality\n  directly in a sane way.\n\nAt its core, the shim simply delegates calls to `setTimeout`/`setInterval` internally but\nby calling those function via TIMER-SHIM you can more easily test your time-dependent\ncode.\n\nThere is a little caveat though, as I try not to pollute your global namespace in that you\nmust update all your `setTimeout` and `setInterval` to use TIMER-SHIM's provided functions\ninstead to be able to use the time simulation functions.\n\nInternally a [node-linkedlist](https://github.com/kilianc/node-linkedlist) is used to\ntrack scheduled tasks with very basic adaptive cleanup. From a set of benchmarks I have\nran, using TIMER-SHIM vs setTimeout adds no more than 100ms overhead for 100,000 tasks on\na decent MBA. This overhead will be completly togglable in the future so you can have\nshims for tests and zero overhead for production.\n\n# INSTALL\n\n```sh\n$ npm install timer-shim --save\n```\n\n# USE\n\n```js\nvar timer = require('timer-shim')\n  , count = 0\n  , handle = null;\n\ntimer.timeout(50, function() { console.log('hello!'); });\n\nhandle = timer.interval(100, function() {\n  console.log(count++);\n  if (count === 10) timer.clear(handle);\n});\n```\n\nSee `example/code.js` and `example/test.js` for an example on how to write code / test the\ncode.\n\n# API\n\n`timer.Timer`  \nInternal class for handling timers. Instances exports the same API as the module itself.\nYou can create multiple instances of this class if you need to `pause()`, `resume()` and\n`wind()` only a certain set of functions while leaving other set of functions still\nworking normally.\n\n`timer.c`  \n`timer.ct`  \n`timer.cto`  \n`timer.clear`  \n`timer.clearTimeout`  \n`timer.clearInterval`  \nClears the timeout handle given. Only works with TIMER-SHIM's provided handles. Does not\nworks with handles returned from native `setTimeout` or `setInterval`.\n\n`timer.clearAll`  \nClears all registered timeout handles. Effectively cancels all scheduled timeout and\nintervals. Useful for reseting the timer in tests.\n\n`timer.t`  \n`timer.to`  \n`timer.timeout`  \n`timer.setTimeout`  \nSchedules a function to run after the specified timeout. Returns a TIMER-SHIM handle.\n\n`timer.i`  \n`timer.in`  \n`timer.iv`  \n`timer.inv`  \n`timer.interval`  \n`timer.setInterval`  \nSchedules a function to run repeatedly every set interval. Returns a TIMER-SHIM handle.\n\n`timer.pause`  \nPauses all timing functions that has not yet run and all functions that may be scheduled\nin the future.\n\n`timer.resume`  \nResumes all scheduled function as though the time hasn't flickered.\n\n`timer.wind( time )`  \nOnly works when paused. Winds the internal clock by the specified `time` (in ms) running\nanything that is scheduled to be run in that amount of time. `resume()`-ing after this\npoint will execute any scheduled functions as though `time` has passed (i.e. shorter\ntimeout, shorter first invocation of interval function)\n\n`timer.unref`  \nCalls [`unref()`][2] if inside node.js environment. Effectively prevents all timers set so\nfar to keep the process alive if they are the only thing waiting to run inside the event\nloop. Useful for cleaning up after timer tests.\n\n`timer.ref`  \nCalls [`ref()`][3] if inside node.js environment. Reverses the effect of `unref()`.\n\n# OVERLOADS\n\nBoth `timer.timeout` and `timer.interval` can be called in either of the following ways:\n\n```js\ntimer.timeout(100, function() { }); // both works\ntimer.timeout(function() { }, 100);\n\ntimer.interval(100, function() { }); // also works\ntimer.interval(function() { }, 100);\n```\n\n# REFS / UNREFS\n\nAll timers are `ref()`-ed by default. See [node.js timers doc][0] for more information\nabout `ref()` and `unref()`. For convenience `timer-shim` provides a top-level `unref()`\nmethod to `unref()` on all timers.\n\n# DEVELOPMENT\n\nTest with:\n\n```sh\nmake test\n```\n\nCompiles with:\n\n```sh\n$ make lib/timer-shim.js\n```\n\n#### TODOs\n\n* Ability to infect global setTimeout/setInterval and route it to call the shim functions\n  instead.\n* Ability to un-shim the the shims and send calls directly to setTimeout/setInterval\n  virtually removing any perf and mem impact (i.e. in production.)\n* Performance optimizations.\n* nextTick support?\n\n# LICENSE\n\nBSD\n\n# SUPPORT\n\nJust open a GitHub issue or ping me [@chakrit][1] on Twitter.\n\n [0]: http://nodejs.org/api/timers.html\n [1]: http://twitter.com/chakrit\n [2]: http://nodejs.org/api/timers.html#timers_unref\n [3]: http://nodejs.org/api/timers.html#timers_ref\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chakrit/timer-shim/issues"
  },
  "_id": "timer-shim@0.3.0",
  "dist": {
    "shasum": "a9bc4a68a876d3f4dfd0c6ae401e68ec1cc561d5",
    "tarball": "http://registry.npmjs.org/timer-shim/-/timer-shim-0.3.0.tgz"
  },
  "_from": "timer-shim@^0.3.0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "chakrit",
    "email": "service@chakrit.net"
  },
  "maintainers": [
    {
      "name": "chakrit",
      "email": "npm@chakrit.net"
    }
  ],
  "directories": {},
  "_shasum": "a9bc4a68a876d3f4dfd0c6ae401e68ec1cc561d5",
  "_resolved": "https://registry.npmjs.org/timer-shim/-/timer-shim-0.3.0.tgz",
  "homepage": "https://github.com/chakrit/timer-shim"
}
