{
  "name": "pre-commit",
  "version": "1.1.2",
  "description": "Automatically install pre-commit hooks for your npm modules.",
  "main": "index.js",
  "scripts": {
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- test.js",
    "example-fail": "echo \"This is the example hook, I exit with 1\" && exit 1",
    "example-pass": "echo \"This is the example hook, I exit with 0\" && exit 0",
    "install": "node install.js",
    "test": "mocha test.js",
    "test-travis": "istanbul cover node_modules/.bin/_mocha --report lcovonly -- test.js",
    "uninstall": "node uninstall.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/observing/pre-commit.git"
  },
  "keywords": [
    "git",
    "hooks",
    "npm",
    "pre-commit",
    "precommit",
    "run",
    "test",
    "development"
  ],
  "author": {
    "name": "Arnout Kazemier",
    "email": "opensource@observe.it"
  },
  "homepage": "https://github.com/observing/pre-commit",
  "license": "MIT",
  "dependencies": {
    "cross-spawn": "2.0.x",
    "which": "1.2.x"
  },
  "devDependencies": {
    "assume": "1.3.x",
    "istanbul": "0.4.x",
    "mocha": "2.3.x",
    "pre-commit": "git://github.com/observing/pre-commit.git"
  },
  "readme": "# pre-commit\n\n[![Version npm][version]](http://browsenpm.org/package/pre-commit)[![Build Status][build]](https://travis-ci.org/observing/pre-commit)[![Dependencies][david]](https://david-dm.org/observing/pre-commit)[![Coverage Status][cover]](https://coveralls.io/r/observing/pre-commit?branch=master)\n\n[version]: http://img.shields.io/npm/v/pre-commit.svg?style=flat-square\n[build]: http://img.shields.io/travis/observing/pre-commit/master.svg?style=flat-square\n[david]: https://img.shields.io/david/observing/pre-commit.svg?style=flat-square\n[cover]: http://img.shields.io/coveralls/observing/pre-commit/master.svg?style=flat-square\n\n**pre-commit** is a pre-commit hook installer for `git`. It will ensure that\nyour `npm test` (or other specified scripts) passes before you can commit your\nchanges. This all conveniently configured in your `package.json`.\n\nBut don't worry, you can still force a commit by telling `git` to skip the\n`pre-commit` hooks by simply committing using `--no-verify`.\n\n### Installation\n\nIt's advised to install the **pre-commit** module as a `devDependencies` in your\n`package.json` as you only need this for development purposes. To install the\nmodule simply run:\n\n```\nnpm install --save-dev pre-commit\n```\n\nTo install it as `devDependency`. When this module is installed it will override\nthe existing `pre-commit` file in your `.git/hooks` folder. Existing\n`pre-commit` hooks will be backed up as `pre-commit.old` in the same repository.\n\n### Configuration\n\n`pre-commit` will try to run your `npm test` command in the root of the git\nrepository by default unless it's the default value that is set by the `npm\ninit` script. \n\nBut `pre-commit` is not limited to just running your `npm test`'s during the\ncommit hook. It's also capable of running every other script that you've\nspecified in your `package.json` \"scripts\" field. So before people commit you\ncould ensure that:\n\n- You have 100% coverage\n- All styling passes.\n- JSHint passes.\n- Contribution licenses signed etc.\n\nThe only thing you need to do is add a `pre-commit` array to your `package.json`\nthat specifies which scripts you want to have ran and in which order:\n\n```js\n{\n  \"name\": \"437464d0899504fb6b7b\",\n  \"version\": \"0.0.0\",\n  \"description\": \"ERROR: No README.md file found!\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: I SHOULD FAIL LOLOLOLOLOL \\\" && exit 1\",\n    \"foo\": \"echo \\\"fooo\\\" && exit 0\",\n    \"bar\": \"echo \\\"bar\\\" && exit 0\"\n  },\n  \"pre-commit\": [\n    \"foo\",\n    \"bar\",\n    \"test\"\n  ]\n}\n```\n\nIn the example above, it will first run: `npm run foo` then `npm run bar` and\nfinally `npm run test` which will make the commit fail as it returns the error\ncode `1`.  If you prefer strings over arrays or `precommit` without a middle\ndash, that also works:\n\n```js\n{\n  \"precommit\": \"foo, bar, test\"\n  \"pre-commit\": \"foo, bar, test\"\n  \"pre-commit\": [\"foo\", \"bar\", \"test\"]\n  \"precommit\": [\"foo\", \"bar\", \"test\"],\n  \"precommit\": {\n    \"run\": \"foo, bar, test\",\n  },\n  \"pre-commit\": {\n    \"run\": [\"foo\", \"bar\", \"test\"],\n  },\n  \"precommit\": {\n    \"run\": [\"foo\", \"bar\", \"test\"],\n  },\n  \"pre-commit\": {\n    \"run\": \"foo, bar, test\",\n  }\n}\n```\n\nThe examples above are all the same. In addition to configuring which scripts\nshould be ran you can also configure the following options:\n\n- **silent** Don't output the prefixed `pre-commit:` messages when things fail\n  or when we have nothing to run. Should be a boolean.\n- **colors** Don't output colors when we write messages. Should be a boolean.\n- **template** Path to a file who's content should be used as template for the\n  git commit body.\n\nThese options can either be added in the `pre-commit`/`precommit` object as keys\nor as `\"pre-commit.{key}` key properties in the `package.json`:\n\n```js\n{\n  \"precommit.silent\": true,\n  \"pre-commit\": {\n    \"silent\": true\n  }\n}\n```\n\nIt's all the same. Different styles so use what matches your project. To learn\nmore about the scripts, please read the official `npm` documentation:\n\nhttps://npmjs.org/doc/scripts.html\n\nAnd to learn more about git hooks read:\n\nhttp://githooks.com\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/observing/pre-commit/issues"
  },
  "_id": "pre-commit@1.1.2",
  "_shasum": "f43e153e36817fb73c3b03c075997af1f9182b5d",
  "_resolved": "git://github.com/observing/pre-commit.git#2ca2fb9878cd9b1c80fc4b73ab90a0d2789c6e00",
  "_from": "pre-commit@^1.0.10"
}
