{"version":3,"sources":["../../src/packrattle/engine.js"],"names":[],"mappings":"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","file":"engine.js","sourcesContent":["\"use strict\";\n\nimport DebugGraph from \"./debug_graph\";\nimport { newParserState } from \"./parser_state\";\nimport PriorityQueue from \"./priority_queue\";\nimport PromiseSet from \"./promise_set\";\nimport { quote } from \"./strings\";\n\n/*\n * an Engine processes a string through a tree of parsers, tracking state\n * is it goes for debugging.\n */\nexport default class Engine {\n  constructor(text, options = {}) {\n    this.text = text;\n    this.debugger = options.debugger;\n    if (typeof this.debugger == \"string\") {\n      const f = require(\"fs\").openSync(this.debugger, \"w\");\n      this.debugger = (text) => require(\"fs\").writeSync(f, text + \"\\n\");\n    }\n    if (options.dotfile) {\n      this.dotfile = typeof options.dotfile == \"string\" ?\n        data => require(\"fs\").writeFileSync(options.dotfile, data) :\n        options.dotfile;\n      this.debugGraph = options.debugGraph || new DebugGraph();\n    }\n\n    // queue contains items of { parser: Parser, state: ParserState, results: PromiseSet }.\n    this.workQueue = new PriorityQueue();\n\n    // cache of (parser, position) -> PromiseSet\n    this.cache = {};\n\n    // how many parsers have we run?\n    this.ticks = 0;\n\n    // track the currently-executing state for debugging (so we can graph the flow on request)\n    this.currentState = null;\n  }\n\n  /*\n   * schedule a parser to be executed at a given state.\n   * returns a PromiseSet which should eventually hold the result.\n   * (if this parser/state has already run or been scheduled, the existing\n   * PromiseSet will be returned.)\n   */\n  schedule(state, condition) {\n    // skip if we've already done or scheduled this one.\n    if (this.cache[state.id]) return this.cache[state.id];\n\n    const results = new PromiseSet({\n      debugger: this.debugger ? (line) => this.debugger(`-> ${state.id} = ${line}`) : null\n    });\n    this.cache[state.id] = results;\n\n    if (this.debugGraph) {\n      this.debugGraph.addNode(state.id, state.parser, state.span());\n      this.debugGraph.addEdge(this.currentState.id, state.id);\n    }\n\n    if (this.debugger) this.debugger(`schedule: ${state.id} ${state.parser.inspect()}`)\n    this.workQueue.put({ state, results }, state.depth, condition);\n    return results;\n  }\n\n  // execute a parser over a string.\n  execute(parser) {\n    const state = newParserState(this);\n    const successes = [];\n    const failures = [];\n\n    this.currentState = state;\n    if (this.debugger) this.debugger(`Try '${quote(this.text)}' in ${parser.inspect()}`);\n    this.schedule(state.next(parser)).then(match => {\n      if (match.ok) {\n        if (this.debugger) this.debugger(`-> SUCCESS: ${match}`);\n        if (this.debugGraph) this.debugGraph.addEdge(match.state.id, \"success\");\n        successes.push(match);\n      } else {\n        if (this.debugger) this.debugger(`-> FAILURE: ${match}`);\n        if (this.debugGraph) this.debugGraph.markFailure(match.state.id);\n         //this.debugGraph.addEdge(match.state.id, \"failure\");\n        failures.push(match);\n      }\n    });\n\n    // start the engine!\n    while (!this.workQueue.isEmpty && successes.length == 0) {\n      const { state, results } = this.workQueue.get();\n\n      this.ticks++;\n      this.currentState = state;\n      if (this.debugger) this.debugger(`${rpad(this.ticks, 4)}. [${state.parser.id}]${state.parser.inspect()} @ ${state.toString()}`)\n\n      state.parser.matcher(state, results, ...(state.parser.children || []));\n    }\n\n    this.currentState = null;\n\n    // message with 'commit' set has highest priority. secondary sort by depth.\n    failures.sort((a, b) => {\n      return (a.commit != b.commit) ? (b.commit ? 1 : -1) : (b.state.startpos - a.state.startpos);\n    });\n\n    if (this.debugger) {\n      if (successes.length > 0) {\n        this.debugger(\"### successes:\");\n        successes.forEach(x => this.debugger(\"    \" + x.toString()));\n      } else {\n        this.debugger(\"### failures:\");\n        failures.forEach(x => this.debugger(\"    \" + x.toString()));\n      }\n    }\n\n    if (this.dotfile) this.dotfile(this.debugGraph.toDot());\n\n    return successes.length > 0 ? successes[0] : failures[0];\n  }\n}\n\n\nfunction rpad(s, n) {\n  s = s.toString();\n  while (s.length < n) s = \" \" + s;\n  return s;\n}\n"]}