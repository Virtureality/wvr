"use strict";

var pr = require("../../lib");
var util = require("util");

require("should");
require("source-map-support").install();

describe("Parser GLL flow", function () {
  it("balances parens", function () {
    var p = pr.alt(pr(["(", function () {
      return p;
    }, ")"]).onMatch(function (x) {
      return ":" + x[1];
    }), "x", "");
    var pc = p.consume();
    pc.execute("(x)").value.should.eql(":x");
    pc.execute("((x))").value.should.eql("::x");
    pc.execute("((x)").ok.should.eql(false);
    pc.execute("(x))").ok.should.eql(false);
  });

  it("accepts doubles", function () {
    var p = pr.alt([function () {
      return p;
    }, function () {
      return p;
    }], "qx");
    var pc = p.consume();
    pc.execute("qx").value.should.eql("qx");
    pc.execute("qxqx").value.should.eql(["qx", "qx"]);
    pc.execute("qxqxqx").value.should.eql([["qx", "qx"], "qx"]);
  });

  it("tracks a bunch of leading zeros", function () {
    // 0 p | \d
    var p = pr.alt(["0", function () {
      return p;
    }], pr(/\d/).onMatch(function (n) {
      return n[0];
    }));
    var pc = p.consume();
    pc.execute("9").value.should.eql("9");
    pc.execute("09").value.should.eql(["0", "9"]);
    pc.execute("009").value.should.eql(["0", ["0", "9"]]);
    pc.execute("0009").value.should.eql(["0", ["0", ["0", "9"]]]);
  });

  it("left-recurses", function () {
    // p p $ | x
    var p = pr.alt([function () {
      return p;
    }, function () {
      return p;
    }, "$"], "x");
    var pc = p.consume();
    pc.execute("x").value.should.eql("x");
    pc.execute("xx$").value.should.eql(["x", "x", "$"]);
    pc.execute("xx$xx$$").value.should.eql([["x", "x", "$"], ["x", "x", "$"], "$"]);
    pc.execute("xx$xx$").ok.should.eql(false);
  });

  it("adds numbers", function () {
    // p + p | \d+
    var p = pr.alt(pr([function () {
      return p;
    }, "+", function () {
      return p;
    }]).onMatch(function (x) {
      return x[0] + x[2];
    }), pr(/\d+/).onMatch(function (x) {
      return parseInt(x, 10);
    }));
    var pc = p.consume();
    pc.execute("23").value.should.eql(23);
    pc.execute("2+3").value.should.eql(5);
    pc.execute("23+100+9").value.should.eql(132);
  });
});
//# sourceMappingURL=test_gll.js.map