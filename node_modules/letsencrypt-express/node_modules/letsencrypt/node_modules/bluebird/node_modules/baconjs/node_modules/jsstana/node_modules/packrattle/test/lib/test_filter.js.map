{"version":3,"sources":["../src/test_filter.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAM,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAChC,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE7B,OAAO,CAAC,QAAQ,CAAC,CAAC;AAClB,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,EAAE,CAAC;;AAExC,QAAQ,CAAC,eAAe,EAAE,YAAM;AAC9B,IAAE,CAAC,0BAA0B,EAAE,YAAM;AACnC,QAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;aAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC;KAAA,EAAE,yBAAyB,CAAC,CAAC;AACvG,KAAC;aAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;MAAA,CAAE,MAAM,SAAM,CAAC,aAAa,CAAC,CAAC;AACjD,QAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,KAAC,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1B,KAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;GAC9B,CAAC,CAAC;;AAEH,IAAE,CAAC,sBAAsB,EAAE,YAAM;;AAE/B,QAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,IAAI;aAAK,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC;KAAA,EAAE,0BAA0B,CAAC,CAAC;AAC1G,KAAC;aAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;MAAA,CAAE,MAAM,SAAM,CAAC,aAAa,CAAC,CAAC;AACjD,KAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;GACjC,CAAC,CAAC;;AAEH,IAAE,CAAC,+BAA+B,EAAE,YAAM;AACxC,QAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,IAAI;aAAK,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC;KAAA,CAAC,CAAC;AAC9E,KAAC;aAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;MAAA,CAAE,MAAM,SAAM,CAAC,iBAAiB,CAAC,CAAC;GACtD,CAAC,CAAC;CACJ,CAAC,CAAC","file":"test_filter.js","sourcesContent":["\"use strict\";\n\nconst pr = require(\"../../lib\");\nconst util = require(\"util\");\n\nrequire(\"should\");\nrequire(\"source-map-support\").install();\n\ndescribe(\"Parser.filter\", () => {\n  it(\"matches with a condition\", () => {\n    const p = pr.regex(/\\d+/).matchIf(match => parseInt(match[0], 10) % 2 == 0, \"Expected an even number\");\n    (() => p.run(\"103\")).should.throw(/even number/);\n    const m = p.execute(\"104\");\n    m.state.pos.should.eql(3);\n    m.value[0].should.eql(\"104\");\n  });\n\n  it(\"can be called filter\", () => {\n    // only allow numbers when the length is even.\n    const p = pr.regex(/\\d+/).filter((match, span) => span.endLine.xpos % 2 == 0, \"Expected an even length!\");\n    (() => p.run(\"103\")).should.throw(/even length/);\n    p.run(\"14\")[0].should.eql(\"14\");\n  });\n\n  it(\"builds a good default message\", () => {\n    const p = pr.regex(/\\d+/).filter((match, span) => span.endLine.xpos % 2 == 0);\n    (() => p.run(\"103\")).should.throw(/Expected filter/);\n  });\n});\n"]}