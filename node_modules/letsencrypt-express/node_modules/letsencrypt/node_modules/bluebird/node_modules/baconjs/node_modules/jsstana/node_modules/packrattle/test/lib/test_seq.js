"use strict";

var pr = require("../../lib");
var util = require("util");

require("should");
require("source-map-support").install();

describe("Parser.seq", function () {
  it("strings together a chained sequence", function () {
    var p = pr.seq(pr.string("abc"), pr.string("123").drop(), pr.string("xyz"));
    var rv = p.execute("abc123xyz");
    rv.state.pos.should.equal(9);
    rv.value.should.eql(["abc", "xyz"]);
  });

  it("can lazily chain a sequence", function () {
    var hits = 0;
    var p = pr.seq(function () {
      hits += 1;
      return pr.string("abc");
    }, function () {
      hits += 1;
      return pr.string("123").drop();
    }, function () {
      hits += 1;
      return pr.string("xyz");
    });

    hits.should.equal(0);
    var rv = p.execute("abc123xyz");
    hits.should.equal(3);
    rv.state.pos.should.equal(9);
    rv.value.should.eql(["abc", "xyz"]);
  });

  it("can sequence optional elements", function () {
    var p = pr(["abc", pr.optional(/\d+/), "xyz"]);
    var rv = p.execute("abcxyz");
    rv.state.pos.should.equal(6);
    rv.value.should.eql(["abc", "xyz"]);
    rv = p.execute("abc99xyz");
    rv.state.pos.should.equal(8);
    rv.value[0].should.eql("abc");
    rv.value[1][0].should.eql("99");
    rv.value[2].should.eql("xyz");
  });

  it("skips a dropped element at the end", function () {
    var p = pr(["abc", pr.optional(/\d+/).drop(), pr.optional(/\w+/).drop()]);
    var rv = p.execute("abcj");
    rv.state.pos.should.equal(4);
    rv.value.should.eql(["abc"]);
    rv = p.execute("abc99");
    rv.state.pos.should.equal(5);
    rv.value.should.eql(["abc"]);
  });

  it("skips whitespace inside seqIgnore()", function () {
    var p = pr.seqIgnore(/\s+/, "abc", "xyz", "ghk");
    var rv = p.execute("abcxyzghk");
    rv.ok.should.equal(true);
    rv.value.should.eql(["abc", "xyz", "ghk"]);
    rv = p.execute("   abc xyz\tghk");
    rv.ok.should.equal(true);
    rv.value.should.eql(["abc", "xyz", "ghk"]);
  });

  it("skips whitespace lazily", function () {
    var hits = 0;
    var p = pr.seqIgnore(function () {
      hits += 1;
      return (/\s+/
      );
    }, function () {
      hits += 1;
      return pr.string("abc");
    }, function () {
      hits += 1;
      return pr.string("xyz");
    }, function () {
      hits += 1;
      return pr.string("ghk");
    });
    hits.should.equal(0);
    var rv = p.execute("   abc xyz\tghk");
    hits.should.equal(4);
    rv.ok.should.equal(true);
    rv.value.should.eql(["abc", "xyz", "ghk"]);
  });

  it("handles regexen in a sequence", function () {
    var p = pr.seq(/\s*/, "if");
    var rv = p.execute("   if");
    rv.ok.should.eql(true);
    rv.state.pos.should.equal(5);
    rv.value[0][0].should.eql("   ");
    rv.value[1].should.eql("if");
    rv = p.execute("if");
    rv.ok.should.eql(true);
    rv.state.pos.should.equal(2);
    rv.value[0][0].should.eql("");
    rv.value[1].should.eql("if");
    rv = p.execute(";  if");
    rv.ok.should.eql(false);
    rv.state.pos.should.equal(0);
    rv.value.should.match(/if/);
  });
});
//# sourceMappingURL=test_seq.js.map