"use strict";

var pr = require("../../lib");
var util = require("util");

require("should");
require("source-map-support").install();

describe("Parser.commit", function () {
  it("can commit to an alternative", function () {
    var p = pr([pr("!").commit(), pr(/\d+/).onFail("! must be a number")]).or(["@", /\d+/]).onMatch(function (a) {
      return [a[0], a[1][0]];
    });
    var rv = p.execute("!3");
    rv.ok.should.equal(true);
    rv.value.should.eql(["!", "3"]);
    rv = p.execute("@55");
    rv.ok.should.equal(true);
    rv.value.should.eql(["@", "55"]);
    rv = p.execute("!ok");
    rv.ok.should.equal(false);
    rv.value.should.eql("! must be a number");
    rv = p.execute("@ok");
    rv.ok.should.equal(false);
    rv.value.should.not.eql("! must be a number");
  });

  it("aborts nested alternatives", function () {
    var p = pr.alt([/\d+/, pr.alt([pr("!").commit(), "0"], /[!a-z0-9]+/)], ["2", "!", /\d+/]);
    var rv = p.execute("2!9");
    rv.ok.should.equal(false);
    rv.value.should.match(/Expected '0'/);
  });

  it("is remembered through a chain", function () {
    var p = pr.alt([pr("!").commit(), "x", "y", /\d+/], /.xyz/);
    var rv = p.execute("!xyz");
    rv.ok.should.equal(false);
  });

  it("is remembered through nested chains", function () {
    var p = pr.alt(pr.seq([pr("!").commit(), "x"], "y"), /.xz/);
    var rv = p.execute("!xz");
    rv.ok.should.equal(false);
  });

  it("is remembered through an exception", function () {
    var p = pr.alt(pr([pr("!").commit(), "x", "y"]).onMatch(function (m) {
      throw new Error("Y!");
    }), /.xyz/);
    var rv = p.execute("!xyz");
    rv.ok.should.equal(false);
  });

  it("doesn't persist through new alternatives", function () {
    var p = pr.alt(pr([pr("b").commit(), "x", pr.alt(/[a-z]z/, pr([pr("m").commit(), "q"]), /[a-z]a/)]), /[a-z]/);
    var rv = p.execute("bxma");
    rv.ok.should.equal(false);
    rv = p.execute("bxmq");
    rv.ok.should.equal(true);
  });

  it("works in an optional branch", function () {
    var p = pr(["a", pr([pr("zz").commit(), "q"]).optional(), /[a-z]{3}/]);
    var rv = p.execute("azzc");
    rv.ok.should.equal(false);
  });
});
//# sourceMappingURL=test_commit.js.map