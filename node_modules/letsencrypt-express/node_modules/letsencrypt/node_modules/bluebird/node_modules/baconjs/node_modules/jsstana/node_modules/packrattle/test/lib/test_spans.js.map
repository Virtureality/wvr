{"version":3,"sources":["../src/test_spans.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;AAEb,IAAM,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAChC,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE7B,OAAO,CAAC,QAAQ,CAAC,CAAC;AAClB,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,EAAE,CAAC;;AAExC,QAAQ,CAAC,sBAAsB,EAAE,YAAM;AACrC,IAAE,CAAC,gBAAgB,EAAE,YAAM;AACzB,QAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,IAAI;aAAK,IAAI;KAAA,CAAC,CAAC;AAC/C,QAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC5B,MAAE,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACvB,MAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7B,MAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GAC5B,CAAC,CAAC;;AAEH,IAAE,CAAC,eAAe,EAAE,YAAM;AACxB,QAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,IAAI;aAAK,IAAI;KAAA,CAAC,CAAC;AAChD,QAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC5B,MAAE,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACvB,MAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7B,MAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GAC5B,CAAC,CAAC;;AAEH,IAAE,CAAC,gBAAgB,EAAE,YAAM;AACzB,QAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,IAAI;aAAK,IAAI;KAAA,CAAC,CAAC,CAAC;AAC9D,QAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC5B,MAAE,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACvB,MAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7B,MAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GAC5B,CAAC,CAAC;;AAEH,IAAE,CAAC,cAAc,EAAE,YAAM;AACvB,QAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,IAAI;aAAK,IAAI;KAAA,CAAC,CAAC;AAC1D,QAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC5B,MAAE,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACvB,MAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7B,MAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GAC5B,CAAC,CAAC;;AAEH,IAAE,CAAC,kBAAkB,EAAE,YAAM;AAC3B,QAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,IAAI;aAAK,IAAI;KAAA,CAAC,CAAC;AAC1D,QAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,MAAE,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;AACtB,MAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7B,MAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GAC5B,CAAC,CAAC;;AAEH,IAAE,CAAC,qBAAqB,EAAE,YAAM;AAC9B,QAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CACd,KAAK,EACL,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,EAClB,EAAE,CAAC,GAAG,CACJ,KAAK,EACL,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,IAAI;aAAK,IAAI;KAAA,CAAC,CACnD,EACD,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CACjB,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,IAAI;aAAK,CAAE,CAAC,EAAE,IAAI,CAAE;KAAA,CAAC,CAAC;AACpC,QAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AAClC,MAAE,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;mCACF,EAAE,CAAC,KAAK;;QAArB,CAAC;QAAE,KAAK;;AAChB,SAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1B,SAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxB,KAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACzB,KAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GACxB,CAAC,CAAC;;AAEH,IAAE,CAAC,yBAAyB,EAAE,YAAM;AAClC,QAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CACd,KAAK,EACL,KAAK,EACL,EAAE,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,IAAI;aAAK,IAAI;KAAA,CAAC,EAC5C,KAAK,EACL,KAAK,CACN,CAAC;AACF,QAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC7C,MAAE,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACvB,QAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzB,QAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACzB,QAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxC,QAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAClC,QAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AACxB,QAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACtC,QAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAChC,QAAI,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAC5B,YAAY,EACZ,YAAY,CACb,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,IAAE,CAAC,cAAc,EAAE,YAAM;AACvB,QAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC;AAC5C,QAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACjC,MAAE,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACxB,QAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AAC7B,QAAI,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAC5B,UAAU,EACV,QAAQ,CACT,CAAC,CAAC;AACH,QAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACzB,QAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GACxB,CAAC,CAAC;;AAEH,IAAE,CAAC,yBAAyB,EAAE,YAAM;AAClC,QAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAC9B,GAAG,CAAC,UAAC,KAAK,EAAE,IAAI;aAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KAAA,CAAC,CAC/C,GAAG,CAAC,UAAC,KAAK,EAAE,IAAI;aAAK,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,GAAG;KAAA,CAAC,CAAC;AACxD,QAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,MAAE,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACvB,MAAE,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAC/B,QAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AAC7B,QAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACzB,QAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GACxB,CAAC,CAAC;CACJ,CAAC,CAAC","file":"test_spans.js","sourcesContent":["\"use strict\";\n\nconst pr = require(\"../../lib\");\nconst util = require(\"util\");\n\nrequire(\"should\");\nrequire(\"source-map-support\").install();\n\ndescribe(\"Parser.onMatch spans\", () => {\n  it(\"cover a string\", () => {\n    const p = pr(\"abc\").onMatch((m, span) => span);\n    const rv = p.execute(\"abc\");\n    rv.ok.should.eql(true);\n    rv.value.start.should.eql(0);\n    rv.value.end.should.eql(3);\n  });\n\n  it(\"cover a regex\", () => {\n    const p = pr(/ab+c/).onMatch((m, span) => span);\n    const rv = p.execute(\"abc\");\n    rv.ok.should.eql(true);\n    rv.value.start.should.eql(0);\n    rv.value.end.should.eql(3);\n  });\n\n  it(\"survive an alt\", () => {\n    const p = pr.alt(\"xyz\", pr(\"abc\").onMatch((m, span) => span));\n    const rv = p.execute(\"abc\");\n    rv.ok.should.eql(true);\n    rv.value.start.should.eql(0);\n    rv.value.end.should.eql(3);\n  });\n\n  it(\"cover an alt\", () => {\n    const p = pr.alt(\"xyz\", \"abc\").onMatch((m, span) => span);\n    const rv = p.execute(\"abc\");\n    rv.ok.should.eql(true);\n    rv.value.start.should.eql(0);\n    rv.value.end.should.eql(3);\n  });\n\n  it(\"cover a sequence\", () => {\n    const p = pr.seq(\"xyz\", \"abc\").onMatch((m, span) => span);\n    const rv = p.execute(\"xyzabc\");\n    rv.ok.should.eql(true)\n    rv.value.start.should.eql(0);\n    rv.value.end.should.eql(6);\n  });\n\n  it(\"cover a combination\", () => {\n    const p = pr.seq(\n      \"abc\",\n      pr.optional(/\\s+/),\n      pr.alt(\n        /\\d+/,\n        pr.seq(\"x\", /\\d+/, \"x\").onMatch((m, span) => span)\n      ),\n      pr.optional(\"?\")\n    ).onMatch((m, span) => [ m, span ]);\n    const rv = p.execute(\"abc x99x?\");\n    rv.ok.should.eql(true);\n    const [ m, state ] = rv.value;\n    state.start.should.eql(0);\n    state.end.should.eql(9);\n    m[2].start.should.eql(4);\n    m[2].end.should.eql(8);\n  });\n\n  it(\"crosses line boundaries\", () => {\n    const p = pr.seq(\n      /\\w+/,\n      /\\s+/,\n      pr(\"line\\nbreak\").onMatch((m, span) => span),\n      /\\s+/,\n      /\\w+/\n    );\n    const rv = p.execute(\"hello line\\nbreak ok\");\n    rv.ok.should.eql(true);\n    const span = rv.value[2];\n    span.start.should.eql(6);\n    span.startLine.lineNumber.should.eql(0);\n    span.startLine.xpos.should.eql(6);\n    span.end.should.eql(16);\n    span.endLine.lineNumber.should.eql(1);\n    span.endLine.xpos.should.eql(5);\n    span.toSquiggles().should.eql([\n      \"hello line\",\n      \"      ~~~~\"\n    ]);\n  });\n\n  it(\"marks errors\", () => {\n    const p = pr.seq(pr(/\\w+/).commit(), /\\d+/);\n    const rv = p.execute(\"hello???\");\n    rv.ok.should.eql(false);\n    const span = rv.state.span();\n    span.toSquiggles().should.eql([\n      \"hello???\",\n      \"     ~\"\n    ]);\n    span.start.should.eql(5);\n    span.end.should.eql(6);\n  });\n\n  it(\"survives chains of maps\", () => {\n    const p = pr.seq(/[a-z]+/, /\\d+/)\n      .map((match, span) => match[0][0] + match[1][0])\n      .map((match, span) => match.toUpperCase() + span.end);\n    const rv = p.execute(\"what34\");\n    rv.ok.should.eql(true);\n    rv.value.should.eql(\"WHAT346\");\n    const span = rv.state.span();\n    span.start.should.eql(0);\n    span.end.should.eql(6);\n  });\n});\n"]}