"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var top = 0;
var total = 0;

/*
 * a priority queue, which stores an item with an associated priority
 * (number). higher numbers are bumped up ahead of lower ones.
 * for our internal array representation, the tail of the array is the head
 * of the queue.
 */

var PriorityQueue = (function () {
  function PriorityQueue() {
    _classCallCheck(this, PriorityQueue);

    this.queue = [];
  }

  _createClass(PriorityQueue, [{
    key: "inspect",
    value: function inspect() {
      return this.queue.slice().reverse();
    }
  }, {
    key: "clear",
    value: function clear() {
      this.queue = [];
    }
  }, {
    key: "get",
    value: function get() {
      this._trim();
      if (this.queue.length == 0) throw new Error("Queue is empty");
      return this.queue.pop().item;
    }

    /*
     * add a job to the queue, at a given priority.
     * if `condition` is given, it must be a function that returns true or false.
     * if it returns false, the item will be skipped on `get()`.
     */
  }, {
    key: "put",
    value: function put(item, priority, condition) {
      var job = { item: item, priority: priority };
      if (condition) job.condition = condition;

      // most of the time, the new job will be highest priority.
      if (this.queue.length == 0 || priority > this.queue[this.queue.length - 1].priority) {
        this.queue.push(job);
        return;
      }
      this._putRange(0, this.queue.length, job);
    }
  }, {
    key: "_putRange",
    value: function _putRange(left, right, job) {
      if (left >= right) {
        // end of line.
        return this.queue.splice(left, 0, job);
      }
      var n = left + Math.floor((right - left) / 2);
      if (this.queue[n].priority >= job.priority) {
        this._putRange(left, n, job);
      } else {
        this._putRange(n + 1, right, job);
      }
    }

    // remove dead entries from the head of the queue.
  }, {
    key: "_trim",
    value: function _trim() {
      while (true) {
        if (this.queue.length == 0) return;
        var _queue = this.queue[this.queue.length - 1];
        var item = _queue.item;
        var priority = _queue.priority;
        var condition = _queue.condition;

        if (!condition || condition()) return;
        this.queue.pop();
      }
    }
  }, {
    key: "length",
    get: function get() {
      return this.queue.length;
    }
  }, {
    key: "isEmpty",
    get: function get() {
      this._trim();
      return this.queue.length == 0;
    }
  }]);

  return PriorityQueue;
})();

exports["default"] = PriorityQueue;
module.exports = exports["default"];
//# sourceMappingURL=priority_queue.js.map