{"version":3,"sources":["../src/test_parser_state.js"],"names":[],"mappings":"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","file":"test_parser_state.js","sourcesContent":["const pr = require(\"../../lib\");\nconst util = require(\"util\");\n\nrequire(\"should\");\nrequire(\"source-map-support\").install();\n\ndescribe(\"Span\", () => {\n  const text = \"line one\\nline two\\nline 3\\n\\nline 4\";\n\n  function verify(line, lineno, xpos) {\n    const lines = text.split(\"\\n\");\n    line.lineNumber.should.eql(lineno);\n    line.xpos.should.eql(xpos);\n    text.slice(line.startOfLine, line.endOfLine).should.eql(lines[line.lineNumber]);\n  }\n\n  it(\"finds the current line\", () => {\n    verify(new pr.Span(text, 0, 1).startLine, 0, 0);\n    verify(new pr.Span(text, 5, 6).startLine, 0, 5);\n    verify(new pr.Span(text, 7, 8).startLine, 0, 7);\n    verify(new pr.Span(text, 8, 9).startLine, 0, 8);\n    verify(new pr.Span(text, 9, 10).startLine, 1, 0);\n    verify(new pr.Span(text, 20, 21).startLine, 2, 2);\n    verify(new pr.Span(text, 25, 26).startLine, 3, 0);\n    verify(new pr.Span(text, 26, 27).startLine, 4, 0);\n    verify(new pr.Span(text, 31, 32).startLine, 4, 5);\n  });\n\n  it(\"can make squiggles\", () => {\n    new pr.Span(text, 5, 8).toSquiggles().should.eql([ \"line one\", \"     ~~~\" ]);\n    new pr.Span(text, 27, 28).toSquiggles().should.eql([ \"line 4\", \" ~\" ]);\n  });\n\n  it(\"can find text around\", () => {\n    new pr.Span(text, 5, 6).around(2).should.eql(\"e [o]ne\");\n    new pr.Span(text, 0, 1).around(2).should.eql(\"[l]in\");\n    new pr.Span(text, 7, 8).around(2).should.eql(\"on[e]\");\n    new pr.Span(text, 10, 11).around(4).should.eql(\"l[i]ne t\");\n  });\n});\n"]}