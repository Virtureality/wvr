"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _lib = require("../../lib");

var _lib2 = _interopRequireDefault(_lib);

require("should");
require("source-map-support").install();

describe("Parser.repeatSeparated", function () {
  it("works", function () {
    var p = _lib2["default"].repeatSeparated("hi", ",").consume();
    var rv = p.execute("hi,hi,hi");
    rv.state.pos.should.equal(8);
    rv.value.should.eql(["hi", "hi", "hi"]);
  });

  describe("comma-separated numbers", function () {
    var p = (0, _lib.repeatSeparated)((0, _lib.regex)(/\d+/).onMatch(function (x) {
      return x[0];
    }), /\s*,\s*/);

    it("matches one", function () {
      var rv = p.consume().execute("98");
      rv.state.pos.should.equal(2);
      rv.value.should.eql(["98"]);
    });

    it("matches several", function () {
      var rv = p.consume().execute("98, 99 ,100");
      rv.state.pos.should.equal(11);
      rv.value.should.eql(["98", "99", "100"]);
    });

    it("map", function () {
      var rv = p.onMatch(function (x) {
        return x.map(function (n) {
          return parseInt(n, 10);
        });
      }).consume().execute("98, 99 ,100");
      rv.state.pos.should.equal(11);
      rv.value.should.eql([98, 99, 100]);
    });

    it("ignores trailing separators", function () {
      var p2 = (0, _lib2["default"])([p, (0, _lib2["default"])(/[^\d]+/).map(function (m) {
        return m[0];
      })]);
      var rv = p2.consume().execute("98, wut");
      rv.state.pos.should.equal(7);
      rv.value.should.eql([["98"], ", wut"]);
    });
  });
});
//# sourceMappingURL=test_repeat_separated.js.map