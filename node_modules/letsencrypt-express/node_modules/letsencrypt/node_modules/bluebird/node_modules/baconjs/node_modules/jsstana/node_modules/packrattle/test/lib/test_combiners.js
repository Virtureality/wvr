"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _lib = require("../../lib");

var _lib2 = _interopRequireDefault(_lib);

require("should");
require("source-map-support").install();

describe("combiners", function () {
  it("chain", function () {
    var p = _lib2["default"].chain("abc", "123", function (a, b) {
      return b + a;
    });
    (function () {
      return p.run("123");
    }).should["throw"](/'abc'/);
    p.run("abc123").should.eql("123abc");
  });

  it("parser.then", function () {
    var p = _lib2["default"].string("abc").then(_lib2["default"].string("123"));
    var rv = p.execute("abc123");
    rv.ok.should.eql(true);
    rv.state.pos.should.equal(6);
    rv.value.should.eql(["abc", "123"]);
    rv = p.execute("abcd");
    rv.ok.should.eql(false);
    rv.state.pos.should.equal(3);
    rv.value.should.match(/123/);
    rv = p.execute("123");
    rv.ok.should.eql(false);
    rv.state.pos.should.equal(0);
    rv.value.should.match(/abc/);
  });

  // seq tests are in test_seq.js.

  it("alt", function () {
    var p = _lib2["default"].alt("hello", "goodbye");
    (function () {
      return p.run("cat");
    }).should["throw"](/'hello'/);
    p.run("hello").should.eql("hello");
    p.run("goodbye").should.eql("goodbye");
  });

  it("parser.or", function () {
    var p = _lib2["default"].string("hello").or(_lib2["default"].string("goodbye"));
    (function () {
      return p.run("cat");
    }).should["throw"](/'hello'/);
    p.run("hello").should.eql("hello");
    p.run("goodbye").should.eql("goodbye");
  });

  it("drop", function () {
    var p = _lib2["default"].drop("abc");
    var m = p.execute("abc");
    m.state.pos.should.eql(3);
    (m.value == null).should.eql(true);
  });

  it("parser.drop", function () {
    var p = (0, _lib2["default"])("abc").drop();
    var m = p.execute("abc");
    m.state.pos.should.eql(3);
    (m.value == null).should.eql(true);
  });

  describe("optional", function () {
    it("optional", function () {
      var p = _lib2["default"].optional(/\d+/, "?");
      var m = p.execute("34.");
      m.state.pos.should.eql(2);
      m.value[0].should.eql("34");
      m = p.execute("no");
      m.state.pos.should.eql(0);
      m.value.should.eql("?");
    });

    it("parser.optional", function () {
      var p = (0, _lib2["default"])(/\d+/).optional("?");
      var m = p.execute("34.");
      m.state.pos.should.eql(2);
      m.value[0].should.eql("34");
      m = p.execute("no");
      m.state.pos.should.eql(0);
      m.value.should.eql("?");
    });

    it("advances position correctly past an optional", function () {
      var p = (0, _lib2["default"])([/[b]+/, (0, _lib2["default"])(/c/).optional().map(function (m, span) {
        return { start: span.start, end: span.end };
      }), (0, _lib2["default"])(/[d]+/)]);
      var rv = p.execute("bbbd");
      rv.ok.should.eql(true);
      rv.value[1].should.eql({ start: 3, end: 4 });
      rv.value[2][0].should.eql("d");
    });

    it("tries both the success and failure sides", function () {
      var p = (0, _lib2["default"])([_lib2["default"].optional(/\d+/), _lib2["default"].alt("z", "9y")]);
      var rv1 = p.execute("33z");
      rv1.ok.should.eql(true);
      rv1.value[1].should.eql("z");
      var rv2 = p.execute("9y");
      rv2.ok.should.eql(true);
      rv2.value[0].should.eql("9y");
      // consumes either "49" or nothing:
      var rv3 = p.execute("49y");
      rv3.ok.should.eql(false);
    });
  });

  it("check", function () {
    var p = _lib2["default"].check("hello");
    var m = p.execute("hello");
    m.ok.should.eql(true);
    m.state.pos.should.eql(0);
    m.value.should.eql("hello");
  });

  it("parser.check", function () {
    var p = (0, _lib2["default"])("hello").check();
    var m = p.execute("hello");
    m.ok.should.eql(true);
    m.state.pos.should.eql(0);
    m.value.should.eql("hello");
  });

  it("check within a sequence", function () {
    var p = (0, _lib2["default"])(["hello", _lib2["default"].check("there"), "th"]);
    var m = p.execute("hellothere");
    m.ok.should.eql(true);
    m.state.pos.should.eql(7);
    m.value.should.eql(["hello", "there", "th"]);
    (function () {
      return p.run("helloth");
    }).should["throw"](/there/);
  });

  it("not", function () {
    var p = _lib2["default"].not("hello");
    var m = p.execute("cat");
    m.state.pos.should.eql(0);
    m.value.should.eql("");
    (function () {
      return p.run("hello");
    }).should["throw"](/hello/);
  });

  it("parser.not", function () {
    var p = _lib2["default"].string("hello").not();
    var m = p.execute("cat");
    m.state.pos.should.eql(0);
    m.value.should.eql("");
    (function () {
      return p.run("hello");
    }).should["throw"](/hello/);
  });
});
//# sourceMappingURL=test_combiners.js.map