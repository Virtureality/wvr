"use strict";

var pr = require("../../lib");
var util = require("util");

require("should");
require("source-map-support").install();

describe("Parser example", function () {
  function binary(left, op, right) {
    return { op: op, left: left, right: right };
  }

  function ws(p) {
    return pr.seqIgnore(/\s+/, p).onMatch(function (x) {
      return x[0];
    });
  }

  var number = ws(/\d+/).onMatch(function (m) {
    return parseInt(m[0], 10);
  });
  var parens = pr([ws(pr("(").drop()), function () {
    return expr;
  }, ws(pr(")").drop())]);
  var atom = pr.alt(number, parens.onMatch(function (e) {
    return e[0];
  }));
  var term = pr.reduce(atom, ws(pr.alt("*", "/", "%")), { first: function first(x) {
      return x;
    }, next: binary });
  var expr = pr.reduce(term, ws(pr.alt("+", "-")), { first: function first(x) {
      return x;
    }, next: binary });

  it("recognizes a number", function () {
    var rv = expr.execute("900");
    rv.ok.should.eql(true);
    rv.value.should.eql(900);
  });

  it("recognizes addition", function () {
    var rv = expr.consume().execute("2 + 3");
    rv.ok.should.eql(true);
    rv.value.should.eql({ op: "+", left: 2, right: 3 });
  });

  it("recognizes a complex expression", function () {
    var rv = expr.consume().execute("1 + 2 * 3 + 4 * (5 + 6)");
    rv.ok.should.eql(true);
    rv.value.should.eql({
      op: "+",
      left: {
        op: "+",
        left: 1,
        right: {
          op: "*",
          left: 2,
          right: 3
        }
      },
      right: {
        op: "*",
        left: 4,
        right: {
          op: "+",
          left: 5,
          right: 6
        }
      }
    });
  });

  it("can add with reduce", function () {
    var number = pr.regex(/\d+/).onMatch(function (m) {
      return parseInt(m[0], 10);
    });
    var expr = pr.reduce(number, "+", { first: function first(n) {
        return n;
      }, next: function next(sum, op, n) {
        return sum + n;
      } });
    var rv = expr.consume().execute("2+3+4");
    rv.ok.should.eql(true);
    rv.state.pos.should.equal(5);
    rv.value.should.equal(9);
  });

  it("csv", function () {
    var csv = pr.repeatSeparated(pr(/([^,]*)/).onMatch(function (m) {
      return m[0];
    }), /,/);
    var rv = csv.consume().execute("this,is,csv");
    rv.ok.should.eql(true);
    rv.value.should.eql(["this", "is", "csv"]);
  });

  it("parses alternatives in priority (left to right) order", function () {
    var abc = pr.string('abc');
    var wordOrSep = pr.alt(/\s+/, /\S+/).onMatch(function (m) {
      return { word: m[0] };
    });
    var line = pr.repeat(pr.alt(abc, wordOrSep));
    var rv = line.consume().execute('abcabc def');
    rv.ok.should.eql(true);
    rv.value.should.eql(["abc", "abc", { word: " " }, { word: "def" }]);
  });

  it("obeys leftmost/depth precedence in the face of ambiguity", function () {
    var expr = pr.repeat(pr.alt(pr.repeat(pr.alt('++', '--'), { min: 1 }), pr(/\S+/).onMatch(function (m) {
      return m[0];
    }), pr(/\s+/).onMatch(function () {
      return null;
    })));
    var rv = expr.consume().execute('++--');
    rv.ok.should.eql(true);
    rv.value.should.eql([["++", "--"]]);
    rv = expr.consume().execute('++y++ --++ ++');
    rv.ok.should.eql(true);
    rv.value.should.eql([["++"], "y++", ["--", "++"], ["++"]]);
  });
});
//# sourceMappingURL=test_example.js.map