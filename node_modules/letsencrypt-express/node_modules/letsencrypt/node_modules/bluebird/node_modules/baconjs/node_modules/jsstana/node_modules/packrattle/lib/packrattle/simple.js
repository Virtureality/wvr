"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.succeed = succeed;
exports.string = string;
exports.regex = regex;

var _parser = require("./parser");

/*
 * simple "building block" parsers.
 */

// matches the end of the string.
var end = (0, _parser.newParser)("end", function (state, results) {
  results.add(state.pos == state.text.length ? state.success() : state.failure());
});

exports.end = end;
// never matches anything.
var reject = (0, _parser.newParser)("reject", function (state, results) {
  results.add(state.failure("rejected"));
});

exports.reject = reject;
// always matches without consuming input and yields the given value.

function succeed(value) {
  return (0, _parser.newParser)("succeed", function (state, results) {
    results.add(state.success(value));
  });
}

// matches a literal string.

function string(s) {
  var len = s.length;
  return (0, _parser.newParser)("string", { cacheable: true, describe: "'" + s + "'" }, function (state, results) {
    var segment = state.text.slice(state.pos, state.pos + len);
    results.add(segment == s ? state.advance(len).success(segment) : state.failure());
  });
}

// matches a regex.

function regex(r) {
  var i = r.ignoreCase ? "i" : "";
  var m = r.multiline ? "m" : "";
  var source = r.source[0] == "^" ? r.source : "^" + r.source;
  var r2 = new RegExp(source, i + m);
  return (0, _parser.newParser)("regex", { cacheable: true, describe: r.toString() }, function (state, results) {
    var m = r2.exec(state.text.slice(state.pos));
    results.add(m ? state.advance(m[0].length).success(m) : state.failure());
  });
}
//# sourceMappingURL=simple.js.map