"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _strings = require("./strings");

/*
 * created by ParserState on demand.
 */

var Match = (function () {
  function Match(ok, state) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, Match);

    this.ok = ok;
    this.state = state;
    this.commit = options.commit;
    // either a boxed result or an error message:
    this.value = options.value;
    // is this an auto-generated error message?
    this.generated = options.generated;
  }

  _createClass(Match, [{
    key: "equals",
    value: function equals(other) {
      return this.ok == other.ok && this.state.pos == other.state.pos && this.value == other.value;
    }
  }, {
    key: "toString",
    value: function toString() {
      var fields = [this.ok ? "yes" : "no", "state=" + this.state, "value='" + (0, _strings.quote)(this.value) + "'"];
      if (this.commit) fields.push("commit");
      return "Match(" + fields.join(", ") + ")";
    }
  }, {
    key: "withState",
    value: function withState(state) {
      return new Match(this.ok, state, this);
    }
  }, {
    key: "withValue",
    value: function withValue(value) {
      var rv = new Match(this.ok, this.state, this);
      rv.value = value;
      return rv;
    }
  }, {
    key: "toError",
    value: function toError(message) {
      var rv = new Match(false, this.state, this);
      rv.value = message;
      rv.generated = false;
      return rv;
    }
  }, {
    key: "changeGeneratedMessage",
    value: function changeGeneratedMessage(message) {
      if (!this.generated) return this;
      var rv = new Match(false, this.state, this);
      rv.value = message;
      return rv;
    }
  }, {
    key: "setCommit",
    value: function setCommit() {
      var rv = new Match(this.ok, this.state, this);
      rv.commit = true;
      return rv;
    }
  }]);

  return Match;
})();

exports["default"] = Match;
module.exports = exports["default"];
//# sourceMappingURL=match.js.map