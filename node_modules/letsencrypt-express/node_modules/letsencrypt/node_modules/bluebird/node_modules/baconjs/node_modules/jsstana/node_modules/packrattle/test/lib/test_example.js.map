{"version":3,"sources":["../src/test_example.js"],"names":[],"mappings":"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","file":"test_example.js","sourcesContent":["\"use strict\";\n\nconst pr = require(\"../../lib\");\nconst util = require(\"util\");\n\nrequire(\"should\");\nrequire(\"source-map-support\").install();\n\ndescribe(\"Parser example\", () => {\n  function binary(left, op, right) {\n    return { op, left, right };\n  }\n\n  function ws(p) {\n    return pr.seqIgnore(/\\s+/, p).onMatch(x => x[0]);\n  }\n\n  const number = ws(/\\d+/).onMatch(m => parseInt(m[0], 10));\n  const parens = pr([ ws(pr(\"(\").drop()), () => expr, ws(pr(\")\").drop()) ]);\n  const atom = pr.alt(number, parens.onMatch(e => e[0]));\n  const term = pr.reduce(atom, ws(pr.alt(\"*\", \"/\", \"%\")), { first: x => x, next: binary });\n  const expr = pr.reduce(term, ws(pr.alt(\"+\", \"-\")), { first: x => x, next: binary });\n\n  it(\"recognizes a number\", () => {\n    const rv = expr.execute(\"900\");\n    rv.ok.should.eql(true);\n    rv.value.should.eql(900);\n  });\n\n  it(\"recognizes addition\", () => {\n    const rv = expr.consume().execute(\"2 + 3\");\n    rv.ok.should.eql(true);\n    rv.value.should.eql({ op: \"+\", left: 2, right: 3 });\n  });\n\n  it(\"recognizes a complex expression\", () => {\n    const rv = expr.consume().execute(\"1 + 2 * 3 + 4 * (5 + 6)\");\n    rv.ok.should.eql(true);\n    rv.value.should.eql({\n      op: \"+\",\n      left: {\n        op: \"+\",\n        left: 1,\n        right: {\n          op: \"*\",\n          left: 2,\n          right: 3\n        }\n      },\n      right: {\n        op: \"*\",\n        left: 4,\n        right: {\n          op: \"+\",\n          left: 5,\n          right: 6\n        }\n      }\n    });\n  });\n\n  it(\"can add with reduce\", () => {\n    const number = pr.regex(/\\d+/).onMatch(m => parseInt(m[0], 10));\n    const expr = pr.reduce(number, \"+\", { first: n => n, next: (sum, op, n) => sum + n });\n    const rv = expr.consume().execute(\"2+3+4\");\n    rv.ok.should.eql(true);\n    rv.state.pos.should.equal(5);\n    rv.value.should.equal(9);\n  });\n\n  it(\"csv\", () => {\n    const csv = pr.repeatSeparated(\n      pr(/([^,]*)/).onMatch(m => m[0]),\n      /,/\n    );\n    const rv = csv.consume().execute(\"this,is,csv\");\n    rv.ok.should.eql(true);\n    rv.value.should.eql([ \"this\", \"is\", \"csv\" ]);\n  });\n\n  it(\"parses alternatives in priority (left to right) order\", () => {\n    const abc = pr.string('abc');\n    const wordOrSep = pr.alt(/\\s+/, /\\S+/).onMatch(m => ({ word: m[0] }));\n    const line = pr.repeat(pr.alt(abc, wordOrSep));\n    const rv = line.consume().execute('abcabc def');\n    rv.ok.should.eql(true);\n    rv.value.should.eql([ \"abc\", \"abc\", { word: \" \" }, { word: \"def\" } ]);\n  });\n\n  it(\"obeys leftmost/depth precedence in the face of ambiguity\", () => {\n    const expr = pr.repeat(\n      pr.alt(\n        pr.repeat(pr.alt('++', '--'), { min: 1 }),\n        pr(/\\S+/).onMatch(m => m[0]),\n        pr(/\\s+/).onMatch(() => null)\n      )\n    );\n    let rv = expr.consume().execute('++--');\n    rv.ok.should.eql(true);\n    rv.value.should.eql([ [ \"++\", \"--\" ] ]);\n    rv = expr.consume().execute('++y++ --++ ++');\n    rv.ok.should.eql(true);\n    rv.value.should.eql([ [ \"++\" ], \"y++\", [ \"--\", \"++\" ], [ \"++\" ] ]);\n  });\n});\n"]}