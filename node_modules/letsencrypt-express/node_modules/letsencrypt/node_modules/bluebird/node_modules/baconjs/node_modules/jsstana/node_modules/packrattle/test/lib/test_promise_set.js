"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _libPackrattlePromise_set = require("../../lib/packrattle/promise_set");

var _libPackrattlePromise_set2 = _interopRequireDefault(_libPackrattlePromise_set);

require("should");
require("source-map-support").install();

describe("PromiseSet", function () {
  it("sets one value and then receives it", function (done) {
    var p = new _libPackrattlePromise_set2["default"]();
    p.add(23);
    p.then(function (v) {
      v.should.eql(23);
      done();
    });
  });

  it("notifies an early listener of a value", function (done) {
    var p = new _libPackrattlePromise_set2["default"]();
    p.then(function (v) {
      v.should.eql(23);
      done();
    });
    p.add(23);
  });

  it("handles multiple values", function (done) {
    var p = new _libPackrattlePromise_set2["default"]();

    p.add(1);
    p.add(2);

    var results = [];
    p.then(function (v) {
      results.push(v);
      if (v == 4) {
        results.should.eql([1, 2, 3, 4]);
        done();
      }
    });

    p.add(3);
    p.add(4);
  });

  it("handles multiple listeners", function () {
    var p = new _libPackrattlePromise_set2["default"]();
    var count = 0;

    p.then(function (v) {
      count += 1;
    });
    p.then(function (v) {
      count += 1;
    });

    p.add(100);
    p.then(function (v) {
      count += 1;
    });

    count.should.eql(3);
  });
});
//# sourceMappingURL=test_promise_set.js.map