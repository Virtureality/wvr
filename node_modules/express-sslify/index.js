"use strict";

var defaults = {
	trustProtoHeader: false,
	trustAzureHeader: false
};

/**
 * Apply options
 *
 * @param {Hash} options
 * @return {Hash}
 * @api private
 */
function applyOptions(options) {
	var settings = {};
	options = options || {};

	for (var option in defaults) {
		settings[option] = options[option] || defaults[option];
	}
	return settings;
}

/**
 * enforceHTTPS
 *
 * @param {Hash} options
 * @param {Boolean} options[trustProtoHeader]
 * @param {Boolean} options[trustAzureHeader]
 * @api public
 */
var enforceHTTPS = function(options) {
	//console.log('Using HTTPSEnforcer ...');

	return function(req, res, next) {
		/*console.log('################################################');
		console.log('Enforcing HTTPS ...');
		console.log('################################################');
		console.log('req.secure: ' + req.secure);
		console.log('req.protocol: ' + req.protocol);
		console.log('req.headers["x-forwarded-proto"]: ' + req.headers["x-forwarded-proto"]);
		if(options) {
			console.log('options.trustProtoHeader: ' + options.trustProtoHeader);
		}
		console.log('req.headers.host: ' + req.headers.host);
		console.log('req.originalUrl: ' + req.originalUrl);
		console.log('req.method: ' + req.method);*/

		// Crash on pre-1.0.0-style arguments
		if(typeof options === 'boolean') {
			return next("express-sslify has changed the way how arguments are treated. Please check the readme.");
		}

		options = applyOptions(options);

		// First, check if directly requested via https
		//var isHttps = req.secure;
		var isHttps = req.secure || req.protocol === 'https';

		// Second, if the request headers can be trusted (e.g. because they are send
		// by a proxy), check if x-forward-proto is set to https
		if(!isHttps && options.trustProtoHeader) {
			isHttps = (req.headers["x-forwarded-proto"] === "https");
		}

		// Third, if trustAzureHeader is set, check for Azure's headers
		// indicating a SSL connection
		if(!isHttps && options.trustAzureHeader && req.headers["x-arr-ssl"]) {
			isHttps = true;
		}

		//console.log('isHttps: ' + isHttps);
		//console.log('req.originalUrl.indexOf("api"): ' + req.originalUrl.indexOf('api'));
		var toRedirect = !isHttps && req.originalUrl.indexOf('api') == -1;
		//console.log('toRedirect: ' + toRedirect);

		/*if(isHttps) {
			next();
		} else {
			// Only redirect GET methods
			/!*if(req.method === "GET" || req.method === 'HEAD') {
				console.log('Redirecting to: ' + "https://" + req.headers.host + req.originalUrl);
				res.redirect(301, "https://" + req.headers.host + req.originalUrl);
			} else {
				res.status(403).send("Please use HTTPS when submitting data to this server.");
			}*!/
			// Redirect All methods
			console.log('Redirecting to: ' + "https://" + req.headers.host + req.originalUrl);
			res.redirect(301, "https://" + req.headers.host + req.originalUrl);
		}*/
		if(toRedirect) {
			//console.log('Redirecting to: ' + "https://" + req.headers.host + req.originalUrl);
			res.redirect(301, "https://" + req.headers.host + req.originalUrl);
		} else {
			next();
		}
	};
};

exports.HTTPS = enforceHTTPS;